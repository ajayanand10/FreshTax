//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
// 
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/entities/entity.service.ts.e.vm
//
import { Injectable } from '@angular/core';
import { HttpModule, Http, Response, Headers, RequestOptions } from '@angular/http';
import { LazyLoadEvent } from 'primeng/primeng';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import { MessageService } from '../../service/message.service';
import { PageResponse, PageRequestByExample } from '../../support/paging';
import { InvGstr1 } from './invGstr1';

@Injectable()
export class InvGstr1Service {

    private options = new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/json' }) });

    constructor(private http: Http, private messageService : MessageService) {}

    /**
     * Get a InvGstr1 by id.
     */
    getInvGstr1(id : any) : Observable<InvGstr1> {
        return this.http.get('/api/invGstr1s/' + id)
            .map(response => new InvGstr1(response.json()))
            .catch(this.handleError);
    }

    /**
     * Update the passed invGstr1.
     */
    update(invGstr1 : InvGstr1) : Observable<InvGstr1> {
        let body = JSON.stringify(invGstr1);

        return this.http.put('/api/invGstr1s/', body, this.options)
            .map(response => new InvGstr1(response.json()))
            .catch(this.handleError);
    }

    /**
     * Load a page (for paginated datatable) of InvGstr1 using the passed
     * invGstr1 as an example for the search by example facility.
     */
    getPage(invGstr1 : InvGstr1, event : LazyLoadEvent) : Observable<PageResponse<InvGstr1>> {
        let req = new PageRequestByExample(invGstr1, event);
        let body = JSON.stringify(req);

        return this.http.post('/api/invGstr1s/page', body, this.options)
            .map(response => {
                let pr : any = response.json();
                return new PageResponse<InvGstr1>(pr.totalPages, pr.totalElements, InvGstr1.toArray(pr.content));
            })
            .catch(this.handleError);
    }

    /**
     * Performs a search by example on 1 attribute (defined on server side) and returns at most 10 results.
     * Used by InvGstr1CompleteComponent.
     */
    complete(query : string) : Observable<InvGstr1[]> {
        let body = JSON.stringify({'query': query, 'maxResults': 10});
        return this.http.post('/api/invGstr1s/complete', body, this.options)
            .map(response => InvGstr1.toArray(response.json()))
            .catch(this.handleError);
    }

    /**
     * Delete an InvGstr1 by id.
     */
    delete(id : any) {
        return this.http.delete('/api/invGstr1s/' + id).catch(this.handleError);
    }

    // sample method from angular doc
    private handleError (error: any) {
        // TODO: seems we cannot use messageService from here...
        let errMsg = (error.message) ? error.message :
        error.status ? `Status: ${error.status} - Text: ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        if (error.status === 401 ) {
            window.location.href = '/';
        }
        return Observable.throw(errMsg);
    }
}
