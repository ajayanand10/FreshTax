/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.freshtax.myapp.dto;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.freshtax.myapp.domain.InvGstr1;
import com.freshtax.myapp.domain.InvItemGstr1;
import com.freshtax.myapp.domain.InvItemGstr1_;
import com.freshtax.myapp.dto.support.PageRequestByExample;
import com.freshtax.myapp.dto.support.PageResponse;
import com.freshtax.myapp.repository.InvGstr1Repository;
import com.freshtax.myapp.repository.InvItemGstr1Repository;

/**
 * A simple DTO Facility for InvItemGstr1.
 */
@Service
public class InvItemGstr1DTOService {

    @Inject
    private InvItemGstr1Repository invItemGstr1Repository;
    @Inject
    private InvGstr1DTOService invGstr1DTOService;
    @Inject
    private InvGstr1Repository invGstr1Repository;

    @Transactional(readOnly = true)
    public InvItemGstr1DTO findOne(Long id) {
        return toDTO(invItemGstr1Repository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<InvItemGstr1DTO> complete(String query, int maxResults) {
        List<InvItemGstr1> results = invItemGstr1Repository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<InvItemGstr1DTO> findAll(PageRequestByExample<InvItemGstr1DTO> req) {
        Example<InvItemGstr1> example = null;
        InvItemGstr1 invItemGstr1 = toEntity(req.example);

        if (invItemGstr1 != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(InvItemGstr1_.itemDesc.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(InvItemGstr1_.itemTyp.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(InvItemGstr1_.hsn.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(InvItemGstr1_.uom.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(invItemGstr1, matcher);
        }

        Page<InvItemGstr1> page;
        if (example != null) {
            page = invItemGstr1Repository.findAll(example, req.toPageable());
        } else {
            page = invItemGstr1Repository.findAll(req.toPageable());
        }

        List<InvItemGstr1DTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public InvItemGstr1DTO save(InvItemGstr1DTO dto) {
        if (dto == null) {
            return null;
        }

        final InvItemGstr1 invItemGstr1;

        if (dto.isIdSet()) {
            InvItemGstr1 invItemGstr1Tmp = invItemGstr1Repository.findOne(dto.id);
            if (invItemGstr1Tmp != null) {
                invItemGstr1 = invItemGstr1Tmp;
            } else {
                invItemGstr1 = new InvItemGstr1();
                invItemGstr1.setId(dto.id);
            }
        } else {
            invItemGstr1 = new InvItemGstr1();
        }

        invItemGstr1.setIniSno(dto.iniSno);

        invItemGstr1.setItemDesc(dto.itemDesc);

        invItemGstr1.setItemTyp(dto.itemTyp);

        invItemGstr1.setHsn(dto.hsn);

        invItemGstr1.setQty(dto.qty);

        invItemGstr1.setUom(dto.uom);

        invItemGstr1.setRate(dto.rate);

        invItemGstr1.setDisc(dto.disc);

        invItemGstr1.setItTxval(dto.itTxval);

        invItemGstr1.setItRt(dto.itRt);

        invItemGstr1.setItCpct(dto.itCpct);

        invItemGstr1.setItCamt(dto.itCamt);

        invItemGstr1.setItSpct(dto.itSpct);

        invItemGstr1.setItSamt(dto.itSamt);

        invItemGstr1.setItIpct(dto.itIpct);

        invItemGstr1.setItIamt(dto.itIamt);

        invItemGstr1.setItCspct(dto.itCspct);

        invItemGstr1.setItCsamt(dto.itCsamt);

        invItemGstr1.setItTotal(dto.itTotal);

        if (dto.invoice == null) {
            invItemGstr1.setInv(null);
        } else {
            InvGstr1 invoice = invItemGstr1.getInv();
            if (invoice == null || (invoice.getId().compareTo(dto.invoice.id) != 0)) {
                invItemGstr1.setInv(invGstr1Repository.findOne(dto.invoice.id));
            }
        }

        return toDTO(invItemGstr1Repository.save(invItemGstr1));
    }

    /**
     * Converts the passed invItemGstr1 to a DTO.
     */
    public InvItemGstr1DTO toDTO(InvItemGstr1 invItemGstr1) {
        return toDTO(invItemGstr1, 1);
    }
    
    /**
     * Converts the passed invoices to a DTO.
     */
    public List<InvItemGstr1DTO> toDTO(List<InvItemGstr1> items) {
    	List<InvItemGstr1DTO> itemDTOs = new ArrayList<>();
    	if(items != null && !items.isEmpty())
    	{
	    	for(InvItemGstr1 item:items)
	    		itemDTOs.add(toDTO(item, 1));
    	}
    	return itemDTOs;
    }

    /**
     * Converts the passed invItemGstr1 to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param invItemGstr1
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public InvItemGstr1DTO toDTO(InvItemGstr1 invItemGstr1, int depth) {
        if (invItemGstr1 == null) {
            return null;
        }

        InvItemGstr1DTO dto = new InvItemGstr1DTO();

        dto.iniSno = invItemGstr1.getIniSno();
        dto.itemDesc = invItemGstr1.getItemDesc();
        dto.itemTyp = invItemGstr1.getItemTyp();
        dto.hsn = invItemGstr1.getHsn();
        dto.qty = invItemGstr1.getQty();
        dto.uom = invItemGstr1.getUom();
        dto.rate = invItemGstr1.getRate();
        dto.disc = invItemGstr1.getDisc();
        dto.itTxval = invItemGstr1.getItTxval();
        dto.itRt = invItemGstr1.getItRt();
        dto.itCpct = invItemGstr1.getItCpct();
        dto.itCamt = invItemGstr1.getItCamt();
        dto.itSpct = invItemGstr1.getItSpct();
        dto.itSamt = invItemGstr1.getItSamt();
        dto.itIpct = invItemGstr1.getItIpct();
        dto.itIamt = invItemGstr1.getItIamt();
        dto.itCspct = invItemGstr1.getItCspct();
        dto.itCsamt = invItemGstr1.getItCsamt();
        dto.itTotal = invItemGstr1.getItTotal();
        dto.id = invItemGstr1.getId();
        if (depth-- > 0) {
            dto.invoice = invGstr1DTOService.toDTO(invItemGstr1.getInv(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a InvItemGstr1.
     * Convenient for query by example.
     */
    public InvItemGstr1 toEntity(InvItemGstr1DTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a InvItemGstr1.
     * Convenient for query by example.
     */
    public InvItemGstr1 toEntity(InvItemGstr1DTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        InvItemGstr1 invItemGstr1 = new InvItemGstr1();

        invItemGstr1.setIniSno(dto.iniSno);
        invItemGstr1.setItemDesc(dto.itemDesc);
        invItemGstr1.setItemTyp(dto.itemTyp);
        invItemGstr1.setHsn(dto.hsn);
        invItemGstr1.setQty(dto.qty);
        invItemGstr1.setUom(dto.uom);
        invItemGstr1.setRate(dto.rate);
        invItemGstr1.setDisc(dto.disc);
        invItemGstr1.setItTxval(dto.itTxval);
        invItemGstr1.setItRt(dto.itRt);
        invItemGstr1.setItCpct(dto.itCpct);
        invItemGstr1.setItCamt(dto.itCamt);
        invItemGstr1.setItSpct(dto.itSpct);
        invItemGstr1.setItSamt(dto.itSamt);
        invItemGstr1.setItIpct(dto.itIpct);
        invItemGstr1.setItIamt(dto.itIamt);
        invItemGstr1.setItCspct(dto.itCspct);
        invItemGstr1.setItCsamt(dto.itCsamt);
        invItemGstr1.setItTotal(dto.itTotal);
        invItemGstr1.setId(dto.id);
        if (depth-- > 0) {
            invItemGstr1.setInv(invGstr1DTOService.toEntity(dto.invoice, depth));
        }

        return invItemGstr1;
    }
}